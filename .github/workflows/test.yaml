# This file is automatically deployed from https://github.com/at-wat/.rospkg-assets.
# Please don't directly edit; update at-wat/.rospkg-assets instead.

name: build
on:
  pull_request:
  push:
    branches:
      - master

permissions:
  contents: read
  packages: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        env:
          - ROS_DISTRO=noetic ALPINE_VERSION=3.20
    env:
      APORTS_DIR: /tmp/abuild/aports
      BUILD_LOG_DIR: /tmp/abuild/build-logs
      ROS_LOG_DIR: /tmp/abuild/ros-logs
      BUILD_CACHE_DIR: /tmp/abuild/ccache
      GCOV_DIR: /tmp/abuild/gcov
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache cpp build
        id: cache-cpp-build
        uses: actions/cache@v4
        with:
          path: ${{ env.BUILD_CACHE_DIR }}
          key: cache-${{ inputs.env }}-${{ github.sha }}
          restore-keys: cache-${{ inputs.env }}-

      - name: Install gh-pr-comment
        uses: at-wat/setup-gh-pr-comment@v0
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set env
        run: |
          echo "${{ matrix.env }}" | xargs -n1 echo | tee -a ${GITHUB_ENV}
          cat .github/workflows/test.env | tee -a ${GITHUB_ENV} || true

      - name: Test
        id: test
        run: |
          touch .github/workflows/abuild.env
          mkdir -p ${APORTS_DIR} ${BUILD_LOG_DIR} ${ROS_LOG_DIR} ${BUILD_CACHE_DIR} ${GCOV_DIR}
          chmod -R a+rw ${APORTS_DIR} ${BUILD_LOG_DIR} ${ROS_LOG_DIR} ${BUILD_CACHE_DIR} ${GCOV_DIR}
          docker run --rm \
            -e JOBS=$(nproc) \
            -e ENABLE_CCACHE="yes" \
            -e CCACHE_DEPEND="true" \
            -e CCACHE_MAXSIZE="500M" \
            -e ROS_LOG_DIR=/home/builder/.ros/log \
            -e ROSCONSOLE_FORMAT='[${severity}] [${time}] [${node}]: ${message}' \
            -e ROS_HOSTNAME=localhost \
            -e CFLAGS=-coverage \
            -e CXXFLAGS=-coverage \
            --env-file .github/workflows/abuild.env \
            -v $(pwd):/src/$(basename $(pwd)):ro \
            -v ${APORTS_DIR}:/aports \
            -v ${BUILD_LOG_DIR}:/logs \
            -v ${ROS_LOG_DIR}:/home/builder/.ros/log \
            -v ${BUILD_CACHE_DIR}:/ccache \
            -v ${GCOV_DIR}:/tmp/gcov \
            ghcr.io/alpine-ros/ros-abuild:${ALPINE_VERSION}-${ROS_DISTRO}
      - name: Report test results
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          build_link="[${GITHUB_RUN_NUMBER}](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})"
          title=
          case "${{ steps.test.conclusion }}" in
            success)
              title=":white_check_mark: Passed"
              ;;
            cancelled)
              exit 0
              ;;
            *)
              title=":x: Failed"
              ;;
          esac
          gh-pr-comment "[${build_link}] ${title} ${ROS_DISTRO} ${ALPINE_VERSION}" \
            "<details><summary>Log summary</summary>

          $(cat ${BUILD_LOG_DIR}/summary.log)
          </details>
          "

      - name: Process coverage reports
        env:
          COVERAGE_PROCESSOR: |
            #!/bin/sh

            set -eu

            REPORT_DIR=coverage
            GCOV_DIR=/tmp/gcov
            APORTS_DIR=/aports

            mkdir -p ${REPORT_DIR}
            cd ${REPORT_DIR}

            echo "::group::rostest gcov files"
            find ${GCOV_DIR} -name "*.gcda" | sed "s|^${GCOV_DIR}/||" | while read file; do
              id=$(echo ${file} | cut -d'/' -f1)
              rel_path=$(echo ${file} | sed 's|^.*/build_isolated/||')
              pkg=$(echo ${rel_path} | cut -d'/' -f1)

              gcda=${GCOV_DIR}/${file}
              new_gcda=$(echo ${rel_path} | sed "s|/\(\S*\)\.gcda$|/\1.${id}.gcda|")
              gcno=${APORTS_DIR}/${ROS_DISTRO}/${pkg}/abuild/build_isolated/${rel_path%.gcda}.gcno
              new_gcno=${new_gcda%.gcda}.gcno

              mkdir -p $(dirname ${new_gcda})
              cp ${gcda} ${new_gcda}
              cp ${gcno} ${new_gcno}
              echo "- ${rel_path}"
            done
            echo "::endgroup::"

            echo "::group::gtest gcov files"
            find ${APORTS_DIR} -name "*.gcda" | sed "s|^${APORTS_DIR}/||" | while read file; do
              rel_path=$(echo ${file} | sed 's|^.*/build_isolated/||')
              pkg=$(echo ${rel_path} | cut -d'/' -f1)

              gcda=${APORTS_DIR}/${file}
              new_gcda=${rel_path}
              gcno=${gcda%.gcda}.gcno
              new_gcno=${new_gcda%.gcda}.gcno

              mkdir -p $(dirname ${new_gcda})
              cp ${gcda} ${new_gcda}
              cp ${gcno} ${new_gcno}
              echo "- ${rel_path}"
            done
            echo "::endgroup::"

            echo "::group::processing gcov files"
            mkdir -p tmp
            find . -name "*.gcda" | while read file; do
              echo "- ${file}"
              pkg=$(echo ${file} | cut -d'/' -f2)
              id=$(echo ${file} | md5sum | cut -d' ' -f1)
              (
                cd tmp
                gcov \
                  -s "/aports/${ROS_DISTRO}/${pkg}/abuild/src" \
                  -p ../${file} \
                  -r \
                  >/dev/null
                find . -name '*.gcov' | while read gcov_file; do
                  mv ${gcov_file} ../${gcov_file%.gcov}.${id}.gcov
                done
              )
            done
            echo "::endgroup::"

            echo "::group::generated gcov files"
            find . -name "*.gcov" | while read file; do
              echo "- ${file}"
            done
            echo "::endgroup::"
        run: |
          echo "${COVERAGE_PROCESSOR}" >coverage.sh
          chmod a+x coverage.sh
          mkdir -p coverage
          chmod a+rw coverage

          docker run --rm \
            -e ROS_DISTRO \
            -v $(pwd):/self \
            -v ${APORTS_DIR}:/aports:ro \
            -v ${GCOV_DIR}:/tmp/gcov:ro \
            --entrypoint /self/coverage.sh \
            -w /self \
            ghcr.io/alpine-ros/ros-abuild:${ALPINE_VERSION}-${ROS_DISTRO}

      - uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload ROS logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ env.ROS_DISTRO }}-${{ env.ALPINE_VERSION }}
          path: ${{ env.ROS_LOG_DIR }}
          retention-days: 1

      - name: Always cache cpp build
        uses: actions/cache/save@v4
        if: always() && steps.cache-cpp-build.outputs.cache-hit != 'true'
        with:
          path: ${{ env.BUILD_CACHE_DIR }}
          key: cache-${{ inputs.env }}-${{ github.sha }}
